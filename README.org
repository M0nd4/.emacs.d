#+TITLE: Manu's Emacs Configuration
#+AUTHOR: Manu Goyal
#+EMAIL: manu.goyal2013@gmail.com
#+OPTIONS: num:nil ^:nil

* General
  Here we have general editing and system settings.
** Personal Keybinding Map
   We define a minor mode for personal keybindings, so that they always take
   precedence over major modes and other minor modes
   #+begin_src emacs-lisp
     ;; Based on http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs
     (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
     (define-minor-mode my-keys-minor-mode
       "A minor mode so that my key settings override annoying major modes."
       t " my-keys" 'my-keys-minor-mode-map)
     (my-keys-minor-mode 1)
   #+end_src
** Shell Environment variables
   We use the exec-path-from-shell package to grab some environment variable
   definitions from the shell environment.
   #+begin_src emacs-lisp
     (if (not (eq system-type 'windows-nt))
         (exec-path-from-shell-initialize)
       )
   #+end_src
** CEDET
   We configure CEDET, a suite of semantic analysis and development tools for
   emacs.
   #+begin_src emacs-lisp
     ;; Activate semantic and ede
     (require 'semantic)
     (require 'semantic/ia)
     (semantic-mode t)
     (global-ede-mode t)
   #+end_src
** TRAMP
   We configure TRAMP, a package that provides transparent remote file access
   over various protocols.
   #+begin_src emacs-lisp
     ;; Tramp saves backups to the local directory, for speed.
     (setq tramp-auto-save-directory "\"/tmp\"")
   #+end_src
** Company mode
   A nice auto-completion framework.
   #+begin_src emacs-lisp
     (require 'company)
     (global-company-mode)
   #+end_src
** Ag
   We use the search tool Ag to search through large codebases, because it's
   significantly faster and smarter than grep or ack.
   #+begin_src emacs-lisp
     (require 'ag)
     (setq ag-highlight-search t)
   #+end_src
** Real-Time Syntax Checking
   We use flycheck, which is better than flymake.
   #+begin_src emacs-lisp
     (require 'flycheck)
     (add-hook 'prog-mode-hook 'flycheck-mode)
     ;; Set the standard library to libc++ so that C++11 headers will work
     (setq flycheck-clang-standard-library "libc++")
     ;; Set the flake8rc location for the flake8 checker
     (setq flycheck-flake8rc "~/.config/flake8")
   #+end_src
** Mac OSX Key Bindings
   We set the alt, command, and super modifiers to meta.
   #+begin_src emacs-lisp
     (setq ns-alternate-modifier 'meta)
     (setq ns-command-modifier 'meta)
     (setq x-super-keysym 'meta)
   #+end_src
** File Backups
   We store backups in a temporary folder.
   #+begin_src emacs-lisp
     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq tramp-backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))
   #+end_src
** File Position Persistence
   We save the cursor position at visited files in between sessions.
   #+begin_src emacs-lisp
     (require 'saveplace)
     (setq-default save-place t)
     (setq save-place-file "~/.emacs.d/.saved-places")
   #+end_src
** camelCase Navigation
   We want to navigate camelCase words as separate words.
   #+begin_src emacs-lisp
     (global-subword-mode)
   #+end_src
** S-Expression Editing
   We want to show matching parentheses and have an easy key chord for deleting
   matching pairs.
   #+begin_src emacs-lisp
     (show-paren-mode)
     (define-key my-keys-minor-mode-map (kbd "M-D") 'delete-pair)
   #+end_src
** Jumping Around Buffers
   We use ace-jump mode.
   #+begin_src emacs-lisp
     (require 'ace-jump-mode)
     (define-key my-keys-minor-mode-map (kbd "C-c c") 'ace-jump-char-mode)
   #+end_src
** Multiple Cursors
   We use the multiple-cursors package, which provides multiple cursors editing
   similar to what you would find in SublimeText.
   #+begin_src emacs-lisp
     (require 'multiple-cursors)
     (define-key my-keys-minor-mode-map (kbd "C-S-c C-S-c") 'mc/edit-lines)
     (define-key my-keys-minor-mode-map (kbd "C->") 'mc/mark-next-like-this)
     (define-key my-keys-minor-mode-map (kbd "C-<") 'mc/mark-previous-like-this)
     (define-key my-keys-minor-mode-map (kbd "C-=") 'mc/mark-all-like-this-dwim)
   #+end_src
** Completion in an ELISP Minibffer
   #+begin_src emacs-lisp
     (define-key read-expression-map [(tab)] 'completion-at-point)
   #+end_src
** Spell Checking
   We use flyspell.
   #+begin_src emacs-lisp
     (require 'flyspell)
     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
     (add-hook 'text-mode-hook 'flyspell-mode)
     ;; Sets flyspell correction to use two-finger mouse click
     (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
   #+end_src
** Color Scheme
   #+begin_src emacs-lisp
     (load-theme 'zenburn)
   #+end_src
** Opening URLs
   In order to open URLs in the correct external browser, we set the browser
   program based on which executable exists (for now, we support mac's "open"
   and gnome's "gnome-open").
   #+begin_src emacs-lisp
     (setq browse-url-generic-program
           (cond
            ((string= system-type "gnu/linux") "gnome-open")
            (t "open")
            )
           )
     ;; The function to open a url should use the generic program
     (setq browse-url-browser-function 'browse-url-generic)
   #+end_src
** File Management
   We configure dired, the emacs file manager.
   #+begin_src emacs-lisp
     ;; Use dired+, because it has more features
     (require 'dired+)
     ;; Running dired-omit mode should hide all dotfiles
     (setq dired-omit-files "^\\..*$")
   #+end_src
** Window and Frame Navigation
   We define keybindings for navigating to different windows and frames. We copy
   the windmove-default-keybindings and framemove-default-keybindings functions
   and modify them to use my-keys-minor-mode-map.
   #+begin_src emacs-lisp
     ;; windmove
     ((lambda ()
        (setq modifier 'shift)
        (define-key my-keys-minor-mode-map (vector (list modifier 'left))
          'windmove-left)
        (define-key my-keys-minor-mode-map (vector (list modifier 'right))
          'windmove-right)
        (define-key my-keys-minor-mode-map (vector (list modifier 'up))
          'windmove-up)
        (define-key my-keys-minor-mode-map (vector (list modifier 'down))
          'windmove-down))
      )
     ;; framemove
     ((lambda ()
        (setq modifiers '(control shift))
        (define-key my-keys-minor-mode-map (vector (append modifiers '(down)))
          'fm-down-frame)
        (define-key my-keys-minor-mode-map (vector (append modifiers '(up)))
          'fm-up-frame)
        (define-key my-keys-minor-mode-map (vector (append modifiers '(left)))
          'fm-left-frame)
        (define-key my-keys-minor-mode-map (vector (append modifiers '(right)))
          'fm-right-frame)
        ))
     
   #+end_src
** UTF-8 Encoding
   We set everything to UTF-8 encoding.
   #+begin_src emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (setq current-language-environment "UTF-8")
     (prefer-coding-system 'utf-8)
   #+end_src
** Better buffer menu
   We make ibuffer the default buffer menu.
   #+begin_src emacs-lisp
     (define-key my-keys-minor-mode-map (kbd "C-x C-b") 'ibuffer)
   #+end_src
** Fill Column
   We set the fill column to a reasonable default.
   #+begin_src emacs-lisp
     (setq-default fill-column 80)
   #+end_src
** Blinking Cursor
   We don't want the cursor to blink.
   #+begin_src emacs-lisp
     (blink-cursor-mode -1)
   #+end_src
** Column numbers
   We want to see the column number we're at on each line.
   #+begin_src emacs-lisp
     (setq column-number-mode t)
   #+end_src
** Undo/Redo
   By default, emacs doesn't have an actual redo function. The way you redo an
   edit is by undoing a previous undo. This can quickly get confusing when
   you're not exactly sure how much you want to undo or redo, so we use undo
   tree, which provides an actual redo function for emacs and maintains all edit
   history by keeping a tree of undos and redos.
   #+begin_src emacs-lisp
     (global-undo-tree-mode)
   #+end_src
** Turn off All Menus and Tool Bars and Whizbangs
   We don't need that stuff.
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src
** No Tabs
   We disable indenting with tabs.
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src
** Navigating sentences
   We put one space after sentences, so we want emacs to recognize these
   sentences for navigation and editing.
   #+begin_src emacs-lisp
     (setq sentence-end-double-space nil)
   #+end_src
** Font
   We use a variable-width font if we're in buffers with human language.
   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'variable-pitch-mode)
   #+end_src
** Case-sensitivity in searches
   By default, we want case sensitivity in searches and replaces to be smart.
   That is, if your search doesn't use capital letters, emacs will ignore case.
   If it does, emacs will be case-sensitive.
   #+begin_src emacs-lisp
     (setq-default case-fold-search t)
   #+end_src
** Whitespace mode
   Turn on whitespace mode when programming. Additional settings for whitespace
   mode can be found in custom.el.
   #+begin_src emacs-lisp
     (require 'whitespace)
     (add-hook 'prog-mode-hook 'whitespace-mode)
   #+end_src
** Recentf mode
   Enable recentf-mode, which allows you to access your most recently-opened
   files
   #+begin_src emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
   #+end_src
** Helm
   Set up Helm
   #+begin_src emacs-lisp
     (require 'helm)
     (require 'helm-config)

     ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
     ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
     ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
     (global-set-key (kbd "C-c h") 'helm-command-prefix)
     (global-unset-key (kbd "C-x c"))

     ;; rebind tab to run persistent action
     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
     ;; make TAB works in terminal
     (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
     ;; list actions using C-z
     (define-key helm-map (kbd "C-z") 'helm-select-action)

     (helm-mode 1)
   #+end_src
* Languages
  Here we have language-specific settings.
** Python
   #+begin_src emacs-lisp
     ;; Loads anaconda mode
     (require 'anaconda-mode)
     (require 'company-anaconda)
     (add-hook 'python-mode-hook 'anaconda-mode)
     (add-to-list 'company-backends 'company-anaconda)
     ;; Sets the python interpreter to be ipython. To trick emacs into thinking we're
     ;; still running regular python, we run ipython in classic mode.
     (setq
      python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --classic")
   #+end_src
** Go
   #+begin_src emacs-lisp
     (require 'go-mode)
     (require 'company-go)
     (add-to-list 'company-backends 'company-go)
   #+end_src
** SQL
   #+begin_src emacs-lisp
     (require 'sql-indent)
     (setq sql-mysql-login-params (quote (user server port password)))
   #+end_src
** HTML/XML/Javascript
   #+begin_src emacs-lisp
     ;; Make js2 the default javascript mode
     (require 'js2-mode)
     (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
   #+end_src
** OCaml
    #+begin_src emacs-lisp
      (if (file-exists-p (expand-file-name "~/.opam"))
          (progn
            ;; Get the necessary environment variable definitions
            (exec-path-from-shell-copy-env "OCAML_TOPLEVEL_PATH")
            ;; Add the .opam site-lisp directory to the load path
            (push (concat
                   (getenv "OCAML_TOPLEVEL_PATH")
                   "/../../share/emacs/site-lisp")
                  load-path)
            ;; utop
            (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
            (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer)
            (setq utop-command "opam config exec \"utop -emacs\"")
            ))
    #+end_src
** CSS
   #+begin_src emacs-lisp
     (add-hook 'css-mode-hook 'rainbow-mode)
   #+end_src
** LaTeX
   #+begin_src emacs-lisp
     (add-hook 'LaTeX-mode-hook 'visual-line-mode)
     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
     (setq reftex-plug-into-AUCTeX t)
     ;; We want to compile to PDFs by default
     (setq TeX-PDF-mode t)
     ;; Company completion for AucTeX
     (require 'company-auctex)
     (company-auctex-init)
   #+end_src
** Haskell
   #+begin_src emacs-lisp
     (require 'haskell-mode)
     ;; Turn on haskell-mode features automatically
     (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
     (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
     (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
     (add-hook 'haskell-mode-hook 'haskell-doc-mode)
   #+end_src
** C/C++
   #+begin_src emacs-lisp
     (require 'company-c-headers)
     (add-to-list 'company-backends 'company-c-headers)
     (define-key c-mode-map (kbd "M-.") 'semantic-ia-fast-jump)
     (define-key c++-mode-map (kbd "M-.") 'semantic-ia-fast-jump)
   #+end_src
