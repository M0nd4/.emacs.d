#+TITLE: Manu's Emacs Configuration
#+AUTHOR: Manu Goyal
#+EMAIL: manu.goyal2013@gmail.com
#+OPTIONS: num:nil ^:nil

* General
  General editing and system settings
** my-keys-minor-mode
   We define a minor mode for personal keybindings, so that they
   always take precedence over major modes and other minor modes
   #+begin_src emacs-lisp
     ;; Based on http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs
     (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
     (define-minor-mode my-keys-minor-mode
       "A minor mode so that my key settings override annoying major modes."
       t " my-keys" 'my-keys-minor-mode-map)
     (my-keys-minor-mode 1)
   #+end_src
** Environment variables
   Uses the exec-path-from-shell package to minimize
   redundancies between emacs and the shell
   #+begin_src emacs-lisp
     (defvar exec-path-from-shell-variables
       '("PATH" "MANPATH" "GOPATH" "CXX" "LD_LIBRARY_PATH" "PYTHONPATH"
         "hlalib" "hlainc" "PATH_TO_MEMSQL" "GOROOT"))
     (exec-path-from-shell-initialize)
   #+end_src
** CEDET
   Configures CEDET
   #+begin_src emacs-lisp
     ;; Creates the directory "~/.emacs.semanticdb" to store the tags
     (when (not (file-exists-p "~/.emacs.semanticdb"))
       (make-directory "~/.emacs.semanticdb"))
     (setq semanticdb-default-save-directory "~/.emacs.semanticdb")
     
     ;; Activate semantic
     (semantic-mode 1)
     ;; Semantic key bindings
     (define-key semantic-mode-map [(control return)] 'semantic-ia-complete-symbol-menu)
     (define-key semantic-mode-map (kbd "C-c j") 'semantic-ia-fast-jump)
     (define-key semantic-mode-map (kbd "C-c r") 'semantic-symref)
     (define-key semantic-mode-map (kbd "C-c l") 'semantic-complete-jump)
     (define-key semantic-mode-map (kbd "C-c p") 'semantic-analyze-proto-impl-toggle)
     ;; Add semantic completions to auto complete
     (require 'auto-complete)
     (add-to-list 'ac-sources 'ac-source-semantic)
     ;; C++ extra include paths
     (semantic-add-system-include "/usr/lib/c++/v1" 'c++-mode)
     (semantic-load-enable-primary-ectags-support)
     ;; EDE
     (global-ede-mode 1)
     (ede-enable-generic-projects)
     
   #+end_src
** Mac OSX key bindings
   Sets the alt, command, and super modifiers to meta
   #+begin_src emacs-lisp
     (setq ns-alternate-modifier 'meta)
     (setq ns-command-modifier 'meta)
     (setq x-super-keysym 'meta)
   #+end_src
** Backups
   Stores backups in a temporary folder
   #+begin_src emacs-lisp
     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq tramp-backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))
   #+end_src
** File position persistence
   Saves the cursor position at visited files in between sessions.
   #+begin_src emacs-lisp
     (require 'saveplace)
     (setq-default save-place t)
     (setq save-place-file "~/.emacs.d/.saved-places")
   #+end_src
** camelCase
   Navigates camelCase words as separate words
   #+begin_src emacs-lisp
     (global-subword-mode)
   #+end_src
** s-expression editing
   Shows matching parentheses and binds a function for deleting
   matching pairs
   #+begin_src emacs-lisp
     (show-paren-mode)
     (define-key my-keys-minor-mode-map (kbd "M-D") 'delete-pair)
   #+end_src
** ace-jump
   Useful for quickly navigating around files
   #+begin_src emacs-lisp
     (define-key my-keys-minor-mode-map (kbd "C-c c") 'ace-jump-char-mode)
   #+end_src
** Multiple cursors
   Similar to what you would find in SublimeText
   #+begin_src emacs-lisp
     (define-key my-keys-minor-mode-map (kbd "C-S-c C-S-c") 'mc/edit-lines)
     (define-key my-keys-minor-mode-map (kbd "C->") 'mc/mark-next-like-this)
     (define-key my-keys-minor-mode-map (kbd "C-<") 'mc/mark-previous-like-this)
     (define-key my-keys-minor-mode-map (kbd "C-=") 'mc/mark-all-like-this-dwim)
   #+end_src
** ido and idomenu
   #+begin_src emacs-lisp
     (ido-mode 1)
     (define-key my-keys-minor-mode-map (kbd "M-i") 'idomenu)
   #+end_src
** smex
   #+begin_src emacs-lisp
     (smex-initialize)
     (define-key my-keys-minor-mode-map (kbd "M-x") 'smex)
     (define-key my-keys-minor-mode-map (kbd "M-X") 'smex-major-mode-commands)
   #+end_src
** eval-expression
   Enables completion in eval-expression minibuffer
   #+begin_src emacs-lisp
     (define-key read-expression-map [(tab)] 'lisp-complete-symbol)
   #+end_src
** flyspell
   Sets flyspell correction to use two-finger mouse click
   #+begin_src emacs-lisp
     (require 'flyspell)
     (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
   #+end_src
** wrap-region
   wrap-region mode allows you to easily surround a region with
   paretheses, brackets, etc.
   #+begin_src emacs-lisp
     (wrap-region-global-mode)
   #+end_src
** Color scheme
   Sets color scheme to solarized-light
   #+begin_src emacs-lisp
     (load-theme 'solarized-light)
   #+end_src
** Browser program
   Sets the browser program based on which executable exists (for now,
   we support mac's "open" and gnome's "gnome-open")
   #+begin_src emacs-lisp
     (setq browse-url-generic-program
           (cond
            ((string= system-type "gnu/linux") "gnome-open")
            (t "open")
            )
           )
   #+end_src
** Dired+
   #+begin_src emacs-lisp
     (require 'dired+)
   #+end_src
** Window navigation
   Navigate to different windows and frames
   #+begin_src emacs-lisp
     ;; We copy the windmove-default-keybindings and
     ;; framemove-default-keybindings functions and modify them to use
     ;; my-keys-minor-mode-map
     
     ;; windmove
     ((lambda ()
        (setq modifier 'shift)
        (define-key my-keys-minor-mode-map (vector (list modifier 'left))  'windmove-left)
        (define-key my-keys-minor-mode-map (vector (list modifier 'right)) 'windmove-right)
        (define-key my-keys-minor-mode-map (vector (list modifier 'up))    'windmove-up)
        (define-key my-keys-minor-mode-map (vector (list modifier 'down))  'windmove-down))
      )
     
     ;; framemove
     ((lambda ()
        (setq modifier 'meta)
        (define-key my-keys-minor-mode-map (vector (list modifier 'down))  'fm-down-frame)
        (define-key my-keys-minor-mode-map (vector (list modifier 'up))    'fm-up-frame)
        (define-key my-keys-minor-mode-map (vector (list modifier 'left))  'fm-left-frame)
        (define-key my-keys-minor-mode-map (vector (list modifier 'right)) 'fm-right-frame))
      )
     
   #+end_src
** Encoding
   #+begin_src emacs-lisp
     (custom-set-variables
      '(current-language-environment "UTF-8")
      '(locale-coding-system 'utf-8))
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+end_src
** Ibuffer
   Enables ibuffer as the default buffer menu
   #+begin_src emacs-lisp
     (define-key my-keys-minor-mode-map (kbd "C-x C-b") 'ibuffer)
   #+end_src
** Terminal settings
   #+begin_src emacs-lisp
     (when (require 'term nil t) ; only if term can be loaded..
       (setq term-bind-key-alist
             (list (cons "C-c C-c" 'term-interrupt-subjob)
                   (cons "M-f" 'term-send-forward-word)
                   (cons "M-b" 'term-send-backward-word)
                   (cons "C-c C-j" 'term-line-mode)
                   (cons "C-c C-k" 'term-char-mode)
                   (cons "M-DEL" 'term-send-backward-kill-word)
                   (cons "M-d" 'term-send-forward-kill-word)
                   (cons "<C-left>" 'term-send-backward-word)
                   (cons "<C-right>" 'term-send-forward-word)
                   (cons "C-r" 'term-send-reverse-search-history)
                   (cons "M-p" 'term-send-raw-meta)
                   (cons "M-y" 'term-send-raw-meta)
                   (cons "C-y" 'term-send-raw))))
   #+end_src
** Gnus
   #+begin_src emacs-lisp
     (setq gnus-select-method
           '(nnimap "gmail"
                    (nnimap-address "imap.gmail.com")
                    (nnimap-server-port 993)
                    (nnimap-stream ssl)))
     
     (setq message-send-mail-function 'smtpmail-send-it
           smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
           smtpmail-auth-credentials '(("smtp.gmail.com" 587
                                        "manu.goyal2013@gmail.com" nil))
           smtpmail-default-smtp-server "smtp.gmail.com"
           smtpmail-smtp-server "smtp.gmail.com"
           smtpmail-smtp-service 587
           gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
   #+end_src
* Languages
  Language-specific settings
** Auto-complete
   Loads and configures auto complete. Other settings for auto
   complete can be found in custom.el
   #+begin_src emacs-lisp
     (require 'auto-complete)
     (require 'auto-complete-config)
     (defun my-ac-config ()
       (setq-default ac-sources 
                     '(ac-source-abbrev 
                       ac-source-dictionary 
                       ac-source-words-in-same-mode-buffers 
                       ac-source-semantic))
       (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
       (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
       (add-hook 'css-mode-hook 'ac-css-mode-setup)
       (add-hook 'auto-complete-mode-hook 'ac-common-setup)
       (global-auto-complete-mode t)
       )
     (my-ac-config)
   #+end_src
** Flycheck
   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook 'flycheck-mode)
   #+end_src
** Python
   #+begin_src emacs-lisp
     ;; Loads pymacs
     (load-file (concat downloads-dir "pymacs.el"))
     ;; Sets up jedi
     (add-hook 'python-mode-hook 'jedi:setup)
     (setq jedi:complete-on-dot t)
     ;; We copied the elpy function to integrate ipython
     (defun elpy-use-ipython (&optional ipython)
       "Set defaults to use IPython instead of the standard interpreter.
     
     With prefix arg, prompt for the command to use."
       (interactive (list (when current-prefix-arg
                            (read-file-name "IPython command: "))))
       (when (not ipython)
         (setq ipython "ipython"))
       (if (boundp 'python-python-command)
           ;; Emacs 24 until 24.3
           (setq python-python-command ipython)
         ;; Emacs 24.3 and onwards.
     
         ;; This is from the python.el commentary.
         ;; Settings for IPython 0.11:
         (setq python-shell-interpreter ipython
               python-shell-interpreter-args ""
               python-shell-prompt-regexp "In \\[[0-9]+\\]: "
               python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
               python-shell-completion-setup-code
               "from IPython.core.completerlib import module_completion"
               python-shell-completion-module-string-code
               "';'.join(module_completion('''%s'''))\n"
               python-shell-completion-string-code
               "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")))
     (elpy-use-ipython)
   #+end_src
** Go
   #+begin_src emacs-lisp
     (require 'go-mode)
     (require 'go-autocomplete)
   #+end_src
** SQL
   #+begin_src emacs-lisp
     (eval-after-load "sql"
       '(load-library "sql-indent"))
   #+end_src
** HTML/XML/Javascript
   #+begin_src emacs-lisp
     (require 'sgml-mode)
     (require 'js)
     (defalias 'html-mode 'sgml-mode)
     (defalias 'xml-mode 'sgml-mode)
     ;; Quickly switch between javascript and html mode
     (define-key sgml-mode-map (kbd "C-c j") 'javascript-mode)
     (define-key js-mode-map (kbd "C-c h") 'html-mode)
   #+end_src
** OCaml
   Loads packages and sets up environment variables using opam, if it
   exists
    #+begin_src emacs-lisp
      (if (file-exists-p (expand-file-name "~/.opam"))
          (progn
            (dolist (var (car (read-from-string (shell-command-to-string "opam config env --sexp"))))
              (setenv (car var) (cadr var)))
            (push (concat (getenv "OCAML_TOPLEVEL_PATH") "/../../share/emacs/site-lisp") load-path)
            ;; utop
            (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
            (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer)
            ;; merlin
            (autoload 'merlin-mode "merlin" "Merlin mode" t)
            (add-hook 'tuareg-mode-hook 'merlin-mode)
            ))
    #+end_src
** CSS
   #+begin_src emacs-lisp
     (add-hook 'css-mode-hook 'rainbow-mode)
   #+end_src
** Java
   #+begin_src emacs-lisp
     ;; Configures eclim
     (require 'eclim)
     (global-eclim-mode)
     (require 'eclimd)
     
     ;; Display error messages in the echo area
     (setq help-at-pt-display-when-idle t)
     (setq help-at-pt-timer-delay 0.1)
     (help-at-pt-set-timer)
     
     ;; Add eclim to auto complete
     (require 'ac-emacs-eclim-source)
     (ac-emacs-eclim-config)
   #+end_src emacs-lisp
* Projects
  Project-specific settings
** Tachyon
   #+begin_src emacs-lisp
     (c-add-style "tachyon"
                 '((c-basic-offset . 2)     ; Guessed value
                   (c-offsets-alist
                    (annotation-top-cont . 0) ; Guessed value
                    (arglist-intro . ++)    ; Guessed value
                    (block-close . 0)       ; Guessed value
                    (class-close . 0)       ; Guessed value
                    (defun-block-intro . +) ; Guessed value
                    (func-decl-cont . ++)   ; Guessed value
                    (inclass . +)           ; Guessed value
                    (inline-close . 0)      ; Guessed value
                    (statement . 0)         ; Guessed value
                    (statement-block-intro . +) ; Guessed value
                    (statement-cont . ++)   ; Guessed value
                    (topmost-intro . 0)     ; Customized value
                    (topmost-intro-cont . ++) ; Guessed value
                    (access-label . -)
                    (annotation-var-cont . +)
                    (arglist-close . c-lineup-close-paren)
                    (arglist-cont c-lineup-gcc-asm-reg 0)
                    (arglist-cont-nonempty . c-lineup-arglist)
                    (block-open . 0)
                    (brace-entry-open . 0)
                    (brace-list-close . 0)
                    (brace-list-entry . 0)
                    (brace-list-intro . +)
                    (brace-list-open . 0)
                    (c . c-lineup-C-comments)
                    (case-label . 0)
                    (catch-clause . 0)
                    (class-open . 0)
                    (comment-intro . c-lineup-comment)
                    (composition-close . 0)
                    (composition-open . 0)
                    (cpp-define-intro c-lineup-cpp-define +)
                    (cpp-macro . -1000)
                    (cpp-macro-cont . +)
                    (defun-close . 0)
                    (defun-open . 0)
                    (do-while-closure . 0)
                    (else-clause . 0)
                    (extern-lang-close . 0)
                    (extern-lang-open . 0)
                    (friend . 0)
                    (incomposition . +)
                    (inexpr-class . +)
                    (inexpr-statement . +)
                    (inextern-lang . +)
                    (inher-cont . c-lineup-multi-inher)
                    (inher-intro . +)
                    (inlambda . c-lineup-inexpr-block)
                    (inline-open . +)
                    (inmodule . +)
                    (innamespace . +)
                    (knr-argdecl . 0)
                    (knr-argdecl-intro . +)
                    (label . 2)
                    (lambda-intro-cont . +)
                    (member-init-cont . c-lineup-multi-inher)
                    (member-init-intro . +)
                    (module-close . 0)
                    (module-open . 0)
                    (namespace-close . 0)
                    (namespace-open . 0)
                    (objc-method-args-cont . c-lineup-ObjC-method-args)
                    (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
                    (objc-method-intro .
                                       [0])
                    (statement-case-intro . +)
                    (statement-case-open . 0)
                    (stream-op . c-lineup-streamop)
                    (string . -1000)
                    (substatement . +)
                    (substatement-label . 2)
                    (substatement-open . +)
                    (template-args-cont c-lineup-template-args +)))
                 )
     
     ;; Sets Tachyon settings for java files in the tachyon directory
     (defconst tachyon-dir (expand-file-name "~/programming/tachyon"))
     (add-hook 'java-mode-hook (lambda ()
                                 "Sets tachyon as the java style if in the tachyon directory"
                                 (if (and (stringp buffer-file-name) (string-prefix-p tachyon-dir buffer-file-name))
                                     (progn
                                      (c-set-style "tachyon")
                                      (set-fill-column 100)))))
                                 
   #+end_src
** Google
   #+begin_src emacs-lisp
     (if (file-exists-p "/google/src/files/head/depot/eng/elisp/google.el")
         (progn
          (load-file "/google/src/files/head/depot/eng/elisp/google.el")
          (setq p4-use-p4config-exclusively t)))
   #+end_src
